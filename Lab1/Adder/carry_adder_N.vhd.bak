-- N bit carry adder
-- Zephaniah Gustafson

library IEEE;
use IEEE.std_logic_1164.all;

entity carry_adder_N is 
generic(N : integer := 16);
port (A_i : in std_logic_vector(N-1 downto 0);
	B_i : in std_logic_vector(N-1 downto 0);
	C_in : in std_logic;
	S_i : out std_logic_vector(N-1 downto 0);
	C_out : out std_logic);
end carry_adder_N;

architecture structural of carry_adder_N is

signal carry : std_logic_vector(N-2 downto 0);

component full_adder is 
port (A : in std_logic;
	B : in std_logic;
	Cin : in std_logic;
	S : out std_logic;
	Cout : out std_logic);
end component;

begin 

full_adder0 : full_adder
port map(
	A => A_i(0),
	B => B_i(0),
	Cin => C_in,
	S => S_i(0),
	Cout : carry(0));

G_NBit_Carry_Adder : for i in 1 to N-2 generate
	full_adderI: full_adder port map(
		A => A_i(i),
		B => B_i(i),
		Cin => carry(i - 1),
		S => S_i(i),
		Cout => wire(i));
end generate G_NBit_Carry_Adder;

full_adderN-one : full_adder
port map(
	A => A_i(N - 1),
	B => B_i(N - 1),
	Cin => carry(N - 2),
	S => S_i(N - 1),
	Cout => C_out);

end structural;
		
	